#!/usr/bin/php

<?php

use GuzzleHttp\Psr7\Request;
use M6Web\Tornado\Adapter\Guzzle\CurlMultiClientWrapper;
use M6Web\Tornado\HttpClient;
use M6Web\Tornado\Adapter\Tornado\EventLoop;
use M6Web\Tornado\Promise;

include __DIR__ . "/../vendor/autoload.php";

const BASE_URI = 'http://localhost:3000/';

if (isset($argv[1])) {
    $eventLoop = new EventLoop();
    $httpClient = new \M6Web\Tornado\Adapter\Guzzle\HttpClient($eventLoop, new CurlMultiClientWrapper());
    switch ($argv[1]) {
        case 'bookCount':
            displayBookCount($eventLoop, $httpClient);
            break;
        case 'authors':
            displayAuthorsAndAuthorsCount($eventLoop, $httpClient);
            break;
        case 'fullBooksInfo':
            displayFullBooksInfo($eventLoop, $httpClient);
            break;
        default:
            die('Unknown argument. RTFM pleaseâ€¦');
    }
}

function displayBookCount(EventLoop $eventLoop, HttpClient $httpClient)
{
    /** @var Promise $bookCount */
    $bookCount = $eventLoop->async(getBookCount($httpClient));
    $bookCount = $eventLoop->wait($bookCount);

    echo "There are $bookCount books available.\n\n";
}

function getBookCount(HttpClient $httpClient): Generator
{
    $request = new Request('GET', BASE_URI . 'list');
    $response = yield $httpClient->sendRequest($request);
    $data = json_decode($response->getBody()->getContents(), true);

    return count($data);
}

function displayAuthorsAndAuthorsCount(EventLoop $eventLoop, HttpClient $httpClient)
{
    /*
     * this is a bit useless to use 2 requests, I could have simply count the response data of the first.
     * But this is to illustrate the syntax : wait(promiseAll(...Promises))
     */
    [$authorsCount, $authors] = $eventLoop->wait(
        $eventLoop->promiseAll(
            $eventLoop->async(getAuthorsCount($httpClient)),
            $eventLoop->async(getAuthors($httpClient))
        )
    );

    echo "The $authorsCount authors are $authors.\n\n";
}

function displayFullBooksInfo(EventLoop $eventLoop, HttpClient $httpClient)
{
    $createGenerator = function (EventLoop $eventLoop, HttpClient $httpClient): Generator {
        /** @var Promise $booksIds */
        $booksIds = yield $eventLoop->async(getBooksIds($httpClient));

        $books = yield $eventLoop->promiseForeach($booksIds, function (int $bookId) use ($eventLoop, $httpClient) {
            $book = yield $eventLoop->async(getBookById($httpClient, $bookId));
            $book['author'] = yield $eventLoop->async(getAuthorById($httpClient, $book['author']['id']));

            return $book;
        });
        var_export($books);
    };

    $eventLoop->wait($eventLoop->async($createGenerator($eventLoop, $httpClient)));
}

function getAuthorsCount(HttpClient $httpClient): Generator
{
    $request = new Request('GET', BASE_URI . 'authors');
    $response = yield $httpClient->sendRequest($request);
    $data = json_decode($response->getBody()->getContents(), true);

    return count($data);
}

function getAuthors(HttpClient $httpClient): Generator
{
    $request = new Request('GET', BASE_URI . 'authors');
    $response = yield $httpClient->sendRequest($request);
    $data = json_decode($response->getBody()->getContents(), true);

    return ltrim(implode(', ', array_map(function (array $author) {
            return $author['firstName'] . ' ' . strtoupper($author['lastName']);
        }, $data)), ', ') . '.';
}

function getBooksIds(HttpClient $httpClient): \Generator
{
    $request = new Request('GET', BASE_URI . 'list');
    $response = yield $httpClient->sendRequest($request);
    $data = json_decode($response->getBody()->getContents(), true);

    return array_map(function (array $book) {
        if (!isset($book['id'])) {
            throw new Exception('Book should have an ID.');
        }

        return $book['id'];
    }, $data);
}

function getBookById(HttpClient $httpClient, int $bookId): \Generator
{
    $request = new Request('GET', BASE_URI . 'books/' . $bookId);
    $response = yield $httpClient->sendRequest($request);

    return json_decode($response->getBody()->getContents(), true);
}

function getAuthorById(HttpClient $httpClient, int $authorId): \Generator
{
    $request = new Request('GET', BASE_URI . 'authors/' . $authorId);
    $response = yield $httpClient->sendRequest($request);

    return json_decode($response->getBody()->getContents(), true);
}

?>